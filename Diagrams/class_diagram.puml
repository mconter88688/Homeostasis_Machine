@startuml

skinparam classAttributeIconSize 0
skinparam classIconSize 0
skinparam useCircleForClasses false
skinparam shadowing false
skinparam classArrowColor Black
skinparam classStyle rectangle
hide circle
scale 0.5



class DataCollection {
    +normal_data: List
    +ld_normal_data: List
    +rd03_normal_data: List
    +program_running: Boolean

    +load_data()
    +clear_data()
    +append_normal_data()
    +append_ld_normal_data()
    +append_rd03_normal_data()
    +save_data()
    +is_empty(): Boolean
}

class CameraData {
    +ret: Boolean
    +frame: List<ndarray>
    +processed_frames: List<ndarray>

    +return_data_in_list(): CameraDataReturnType
}

class CameraDataReturnType {
    +ret: Boolean
    +frame: List<ndarray>
    +processed_frames: List<ndarray>
}

class AllSensors {
    +lidar: LD19 [0..1]
    +rd03: RD03Protocol [0..1]
    +gemini: Camera [0..1]
    +lidar_data: List [0..1]
    +rd03_data: List [0..1]
    +gemini_data: List [0..1]

    +start()
    +stop()
    +capture_sensor_info(): AllSensorsData [0..1]
}

class AllSensorsData {
    +camera_data: CameraData
    +lidar_data: LidarPreprocessedData [0..1]
    +rd03_data: RadarPreprocessedData [0..1]
}

class Camera{
    +pipeline: Pipeline
    +device: Device
    +config: Config
    +sensor_list: SensorList
    +video_sensor_types: List<OBSensorType>
    +hdr_filter: Filter[0..1]
    +frames_queue: Queue<FrameSet>
    +cached_frames: Dict<String, ndarray [0..1]>
    + state: String [0..1]
    + number: Integer

    +configure_streams()
    +configure_HDR()
    +start()
    +one_capture(): CameraData [0..1]
    +process_color(): ndarray [0..1]
    +create_depth_image(): ndarray
    +create_ir_image(): ndarray
    +safe_get_depth(): ndarray [0..1]
    +safe_get_ir(): ndarray [0..1]
    +on_new_frame_callback()
    +create_display(): ndarray [0..1]
    +enhance_contrast(): ndarray
    +stop()
}


class Transition{
    +toState: String
    +Execute()
}

abstract class State {
    +Enter()
    +Execute()
    +Exit()
}

class FSM {
    +states: Map<String, State>
    +transitions: Map<String, Transition>
    -char: Character
    -curState: State
    -prevState: State
    -curTrans: Transition

    +SetState()
    +Transition()
    +Execute()
}

class HS_model{
    +FSM: FSM
}


class LiDARPreprocessedData {
    +num_data_points: Integer
    +angle_array: Array<Float>
    +distance_array: Array<Float>
    +intensity_array: Array<Float>
    +speed: Float [0..1]
    +timestamp: Float [0..1]
    +are_there_prev_vals: Boolean
    +prev_distance: Array<Float>
    +prev_intensity: Array<Float>

    +circular_median_filter()
    +ema()
    +bin_lidar_data()
    +class_to_single_normalized_numpy_array()
    +dsp_lidar()
    +copy(): LiDARPreprocessedData
    +graph()
}

class LidarIntakeData {
    +angles: List<Float>
    +distances: List<Float>
    +intensities: List<Float>
    +speed_samples: List<Float>
    +start_timestamp: Integer [0..1]
    +end_timestamp: Integer [0..1]

    +append_all_lists()
    +clear_all()
    +copy(): LidarIntakeData
    +calc_mid_timestamp(): Float
    +calc_speed(): Float
}

class LD19 {
    +start()
    +send_scan_calc_speed_and_clear()
    -_reader_thread()
    
}


class ModelConfigParam {
    +epochs: Integer
    +batch_size: Integer [0..1]
    +validation_split: Float
    +feedback_file: String [0..1]
    +model_file: String [0..1]
    +temp_graph: String [0..1]
    +verbose: Integer
    +callbacks: Callback [0..1]
    +shuffle: Boolean

    +redefine_all()
}

abstract class HomeostasisModel {
    +model: Model
    +fit(): History
}

class LDRD03Autoencoder {
  +lidar_buffer: Deque<ndarray>
  +radar_buffer: Deque<ndarray>
  +all_features_append()
  +are_buffers_long_enough(): Boolean
  +model_prediction(): Float [0..1]
  +predict(): Float
}

class ImageAutoencoder {
  +color_feature_extractor: Model [0..1]
  +ir_feature_extractor: Model [0..1]
  +hdr_feature_extractor: Model [0..1]
  +buffer: Deque<ndarray>
  +feature_append()
  +is_buffer_long_enough(): Bool
  +feature_extractor_setup()
  +extract_color_features(): ndarray
  +extract_ir_features(): ndarray
  +extract_hdr_features(): ndarray
  +feature_extract_combine(): ndarray
  +model_prediction(): Float [0..1]
  +predict(): Float
}

class RadarPreprocessedData {
    +x_coords: ndarray
    +y_coords: ndarray
    +speeds: ndarray
    +distances: ndarray
    +timestamp: Integer [0..1]
    +are_there_prev_vals: Boolean
    +prev_x_coords: ndarray
    +prev_y_coords: ndarray
    +prev_speeds: ndarray
    +prev_distances: ndarray
    +angles: ndarray

    +update_for_new_target_data()
    +class_to_single_normalized_numpy_array(): ndarray
    +copy(): RadarPreprocessedData
    +ema()
    +coords_to_angles()
}

class RadarTarget {
    +x_coord: Integer
    +y_coord: Integer
    +speed: Integer
    +distance: Integer
}

class RD03Protocol {
    +HEADER: bytes
    +FOOTER: bytes
    +TARGET_DATA_SIZE: Integer
    +WAITING_HEADER: Integer
    +READING_DATA: Integer
    +WAITING_FOOTER: Integer
    +TRACE_LENGTH: Integer

    +start()
    +_decode_raw(): Integer
    +dsp_and_send_scan()
    +_parse_target_data(): RadarTarget
    +_reader_thread()
}

abstract class Sensor {
    +name: String
    +serial: Serial [0..1]
    +baudrate: Integer
    +port: String
    +thread: Thread [0..1]
    +running: Boolean
    +lock: Lock
    +latest_data: Object [0..1]
    +timestamp_data: List<Float>

    
    + start()
    + stop()
    + get_scan(): Object [0..1]
}

class NormalDataTraining {
    - FSM: FSM
    - num_frames: Integer
    - model_data: DataCollection
    - allsensors: AllSensors
    - temporal_model: ImageAutoencoder
    - ldrd_temporal_model: LDRD03Autoencoder

    + Enter()
    + Execute()
    + Exit()
}

'NormalDataTraining Aggregation
FSM "1" --o "1" NormalDataTraining : has <
DataCollection "1" --o "1" NormalDataTraining : has <
AllSensors "1" --o "1" NormalDataTraining : has <
ImageAutoencoder "1" --o "1" NormalDataTraining : has <
LDRD03Autoencoder "1" --o "1" NormalDataTraining : has <


class WipingModelAndFeedback {
  -FEEDBACK_FILE: String
  -IMAGE_MODEL_PATH: String
  -LDRD_MODEL_PATH: String
  -FSM: FSM
  -model_data: DataCollection
  
  +Enter()
  +Execute()
}

'WipingModelAndFeedback Aggregation
FSM "1" --o "1" WipingModelAndFeedback : has <
DataCollection "1" --o "1" WipingModelAndFeedback : has <


class Menu {
  -FSM: FSM

  +Enter()
  +Execute()
}

'Menu Aggregation
FSM "1" --o "1" Menu : has <


class TrainingModel {
    -FEEDBACK_FILE: String
    -MODEL_PATH: String
    -FSM: FSM
    -model_data: DataCollection
    -model_params: ModelConfigParam
    -temporal_model: HomeostasisModel
    -BEST_MODEL_PATH: String
    -name_of_model: String

    +Enter()
    +Execute()
}

'TrainingModel Aggregation
FSM "1" --o "1" TrainingModel : has <
DataCollection "1" --o "1" TrainingModel : has <
ModelConfigParam  "1" --o "1" TrainingModel : has <
HomeostasisModel  "1" --o "1" TrainingModel : has <

class LoadModel {
    -FSM: FSM
    -model_params: ModelConfigParam
    -temporal_model: HomeostasisModel
    -MODEL_FOLDER: String
    -name_of_model: String

    +Enter()
    +Execute()
}

'LoadModel Aggregation
FSM "1" --o "1" LoadModel : has <
ModelConfigParam "1" --o "1" LoadModel : has <
HomeostasisModel "1" --o "1" LoadModel : has <

class DocumentFeedback {
    -FSM: FSM
    -model_params_list: List<ModelConfigParam>
    -model_data: DataCollection
    +Enter()
    +Execute()
}

'DocumentFeedback Aggregation
FSM "1" --o "1" DocumentFeedback : has <
ModelConfigParam "1" --o "1" DocumentFeedback : has <
DataCollection "1" --o "1" DocumentFeedback : has <


class DocumentModel {
    -FSM: FSM
    -model_params: ModelConfigParam
    -temporal_model: HomeostasisModel
    -MODEL_FOLDER: String
    -name_of_model: String
    +Enter()
    +Execute()
    +Exit()
}

'DocumentModel Aggregation
FSM "1" --o "1" DocumentModel : has <
ModelConfigParam "1" --o "1" DocumentModel : has <
HomeostasisModel "1" --o "1" DocumentModel : has <

class TestingModel {
    -FSM: FSM
    -temporal_model: ImageAutoencoder
    -ldrd_temporal_model: LDRD03Autoencoder
    -model_data: DataCollection
    -FEEDBACK_FILE: String
    +Enter()
    +Execute()
}

'TestingModel Aggregation
FSM "1" --o "1" TestingModel : has <
ImageAutoencoder "1" --o "1" TestingModel : has <
LDRD03Autoencoder "1" --o "1" TestingModel : has <
DataCollection "1" --o "1" TestingModel : has <

class RLHF {
    -FSM: FSM
    -model_data: DataCollection
    -allsensors: AllSensors
    -temporal_model: ImageAutoencoder
    -ldrd_temporal_model: LDRD03Autoencoder

    +Enter()
    +Execute()
    +Exit()
}

'RLHF Aggragation
FSM "1" --o "1" RLHF : has <
DataCollection "1" --o "1" RLHF : has <
AllSensors "1" --o "1" RLHF : has <
ImageAutoencoder "1" --o "1" RLHF : has <
LDRD03Autoencoder "1" --o "1" RLHF : has <


class End {
    -FSM: FSM
    -model_data: DataCollection
    -allsensors: AllSensors

    +Enter()
    +Execute()
}

'End Aggregation
FSM "1" --o "1" End : has <
DataCollection "1" --o "1" End : has <
AllSensors "1" --o "1" End : has <



' Dependencies
CameraData ..> CameraDataReturnType : returns
AllSensors ..> AllSensorsData : returns
Camera ..> CameraData : returns

'AllSensors Composition
Camera "1" --* "1" AllSensors : has <
LD19 "1" --* "1" AllSensors : has <
RD03Protocol "1" --* "1" AllSensors : has <

Transition "0..*" --* "1" FSM : has <
FSM "1" --* "1" HS_model : has <

'Lidar.py dependencies
LiDARPreprocessedData "1" --> "1" LidarIntakeData : uses >
LD19 "1" ..> "1" LidarIntakeData : uses >
LD19 "1" ..> "1" LiDARPreprocessedData : uses >

'rd03_protocol.py dependencies
RadarPreprocessedData "1" ..> "0..*" RadarTarget : uses >
RD03Protocol "1" ..> "0..*" RadarTarget : uses >
RD03Protocol "1" ..> "1" RadarPreprocessedData : uses >

'Inheritance of HomeostasisModel
together {
  HomeostasisModel <|-- LDRD03Autoencoder
  HomeostasisModel <|-- ImageAutoencoder
}

'Inheritance of Sensor
together {
  Sensor <|-- LD19 
  Sensor <|-- RD03Protocol
}

'Inheritance of State
together {
  State <|-- NormalDataTraining
  State <|-- WipingModelAndFeedback
  State <|-- Menu
  State <|-- TrainingModel
  State <|-- LoadModel
  State <|-- DocumentFeedback
  State <|-- DocumentModel
  State <|-- TestingModel
  State <|-- RLHF
  State <|-- End
}

@enduml